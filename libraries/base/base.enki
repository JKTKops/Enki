display X where writeln X.

as text X is term_to_atom X.

the X is X.

id X is X.

odd X if X = 2*K + 1.
even X if X = 2*K.

square root X is (Root^2) = X, Root.

A divides B if B = A*N.

list A may be
    empty.
    cons Head Tail has
        Head : A,
        Tail : list A.

prepend Head to Tail is cons Head Tail.

pair A B may be
    pair X and Y has X : A, Y : B.

length of List is
    when List = cons H T then 1 + length of T.
    otherwise then 0.

construct Head Full is
    Full = cons Head Tail,
    Tail.

concat A with B is
    when A = cons H T then prepend H to concat T with B.
    otherwise then B.

flatten List is
    when List = cons H T then concat H with flatten T.
    otherwise then empty.

reverseAcc A Acc is
    when A = cons H T then reverseAcc T (cons H Acc).
    otherwise then Acc.

reverse list A is reverseAcc A empty.

sum of List is
    when List = cons H T then H + sum of T.
    otherwise then 0.

multiples of A in List is
    when List = cons H T, A divides H then cons H (multiples of A in T).
    when List = cons H T then multiples of A in T.
    otherwise then empty.

formatHelper List is
    when List = cons H empty then H .. "]".
    when List = cons H T then H .. "," .. formatHelper T.
    otherwise then "]".

format list List is "[" .. formatHelper List.

range Low to High is
    when Low > High then empty.
    otherwise then cons Low (range (Low + 1) to High).

range from Low to High is range Low to High.
integers from Low to High is range Low to High.

inc List is
    when List = (cons H T) then
        cons (H + 1) (inc T).
    otherwise then empty.

zip A and B is
    when A = cons HA TA, B = cons HB TB then
        cons (pair HA and HB) (zip TA and TB).
    otherwise then empty.

max of A and B is
    when A > B then A.
    otherwise then B.

min of A and B is
    when A > B then A.
    otherwise then B.

maximum of List is
    when List = cons H empty then H.
    when List = cons H T then max of H and maximum of T.
    otherwise then 0.

minimum of List is
    when List = cons H empty then H.
    when List = cons H T then min of H and minimum of T.
    otherwise then 0.

find factor of N starting with X is
    when X divides N then X.
    otherwise then find factor of N starting with (X + 1).

factors of N is
    when N = 1 then empty.
    otherwise then
        Factor = find factor of N starting with 2,
        cons Factor factors of (N / Factor).

digits of N is
    when N < 10 then cons N empty.
    otherwise then
        N = 10*Rest + Digit,
        Digit >= 0, Digit < 10,
        cons Digit digits of Rest.

palindrome List if reverse list List = List.
palindromic number N if palindrome digits of N.

pair X with each List is
    when List = cons H T then cons (pair X and H) (pair X with each T).
    otherwise then empty.

cartesian product of A and B is
    when A = cons H T then
        concat (pair H with each B) with cartesian product of T and B.
    otherwise then empty.

pairs of A and B is cartesian product of A and B.

take N from List is
    when N > 0, List = cons H T then cons H (take (N - 1) from T).
    otherwise then empty.

drop N from List is
    when N > 0, List = cons H T then drop (N - 1) from T.
    otherwise then List.

product of List is
    when List = cons H T then H * (product of T).
    otherwise then 1.

element N of List starting with H is
    when N <= 0 then H.
    when List = cons X Rest then element (N - 1) of Rest starting with X.
    otherwise then H.

chunks of size L in List is
    when List = empty then empty.
    otherwise then cons (take L from List) (chunks of size L in drop L from List).

chunks of length L in List is chunks of size L in List.

