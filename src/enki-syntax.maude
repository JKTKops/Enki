mod ENKI-SYNTAX-SORTS is
    protecting INT .
    protecting BOOL .
    protecting STRING .

    sort EnkiType .
    op int : -> EnkiType .
    op bool : -> EnkiType .
    op string : -> EnkiType .
    op any : String -> EnkiType .
    op func : EnkiType EnkiType -> EnkiType .

    vars T1 T2 : EnkiType .
    op returnType : EnkiType -> EnkiType .
    eq returnType(func(T1, T2)) = returnType(T2) .
    eq returnType(T1)           = T1 [owise] .

    sort Id .
    op s : String -> Id .
    op i : Int -> Id .
    op b : Bool -> Id .
    op v : String -> Id .
    op vmap : String String -> Id .
    op fid : Id -> Id .
    op t : Id EnkiType -> Id .

    sort Constraint .
    op c : Id -> Constraint .
    op _ _ : Constraint Constraint -> Constraint [assoc] .

    sort Expr .
    op e : Id -> Expr .

    sort EnkiFunc .
    op f : Id Expr -> EnkiFunc .

    sort EnkiRule .
    op r : Id Constraint -> EnkiRule .
endm

view Id from TRIV to ENKI-SYNTAX-SORTS is
    sort Elt to Id .
endv

view EnkiType from TRIV to ENKI-SYNTAX-SORTS is
    sort Elt to EnkiType .
endv

view EnkiFunc from TRIV to ENKI-SYNTAX-SORTS is
    sort Elt to EnkiFunc .
endv

mod ENKI-SYNTAX is
    protecting ENKI-SYNTAX-SORTS .

    protecting LIST{Id} .
    protecting LIST{String} .

    var S : String .
    var I : Int .
    var B : Bool .
    var T : EnkiType .
    vars Id Id1 Id2 : Id .
    vars Ids Ids1 Ids2 : List{Id} .

    op comp : List{Id} -> Id .

    op idList : Id -> List{Id} .
    eq idList(v(S))         = v(S) .
    eq idList(b(B))         = b(B) .
    eq idList(i(I))         = i(I) .
    eq idList(s(S))         = s(S) .
    eq idList(t(Id, T))     = t(Id, T) .
    eq idList(comp(nil))    = nil .
    eq idList(comp(Id Ids)) = append(idList(Id), idList(comp(Ids))) .

    op varlist : Id -> List{Id} .
    eq varlist(s(S))           = nil .
    eq varlist(i(I))           = nil .
    eq varlist(b(B))           = nil .
    eq varlist(v(S))           = v(S) .
    eq varlist(t(v(S), T))     = t(v(S), T) .
    eq varlist(t(Id, T))       = nil .
    eq varlist(comp(nil))      = nil .
    eq varlist(comp(Id Ids))   = append(varlist(Id), varlist(comp(Ids))) .

    var L : List{Id} .
    op varstrs : List{Id} -> List{String} .
    eq varstrs(nil)          = nil .
    eq varstrs(v(S) L)       = S varstrs(L) .
    eq varstrs(t(v(S), T) L) = S varstrs(L) .

    op strlist : Id -> List{String} .
    eq strlist(s(S))           = S .
    eq strlist(i(I))           = nil .
    eq strlist(b(B))           = nil .
    eq strlist(v(S))           = S .
    eq strlist(t(Id, T))       = nil .
    eq strlist(comp(nil))      = nil .
    eq strlist(comp(Id Ids))   = append(strlist(Id), strlist(comp(Ids))) .

    op prependIds : Id Id -> Id .
    eq prependIds(Id, comp(Ids))          = comp(Id Ids) .
    eq prependIds(Id1, Id2)               = comp(Id1 Id2) [owise] .
endm

