mod ENKI-SYNTAX-UTILITY is
    protecting ENKI-SYNTAX-SORTS .

    protecting LIST{Id} .
    protecting LIST{Constraint} .
    protecting LIST{String} .
    protecting LIST{EnkiType} .

    var S : String .
    var I : Int .
    var B : Bool .
    vars T T1 T2 : EnkiType .
    vars Id Id1 Id2 : Id .
    vars Ids Ids1 Ids2 : List{Id} .
    var L : List{Id} .

    op comp : List{Id} -> Id .
    op cs : List{Constraint} -> Constraint .

    op idList : Id -> List{Id} .
    eq idList(v(S))         = v(S) .
    eq idList(b(B))         = b(B) .
    eq idList(i(I))         = i(I) .
    eq idList(s(S))         = s(S) .
    eq idList(t(Id, T))     = t(Id, T) .
    eq idList(comp(nil))    = nil .
    eq idList(comp(Id Ids)) = append(idList(Id), idList(comp(Ids))) .

    op varlist : Id -> List{Id} .
    eq varlist(s(S))           = nil .
    eq varlist(i(I))           = nil .
    eq varlist(b(B))           = nil .
    eq varlist(v(S))           = v(S) .
    eq varlist(t(v(S), T))     = t(v(S), T) .
    eq varlist(t(Id, T))       = nil .
    eq varlist(comp(nil))      = nil .
    eq varlist(comp(Id Ids))   = append(varlist(Id), varlist(comp(Ids))) .

    op varstrs : List{Id} -> List{String} .
    eq varstrs(s(S))           = nil .
    eq varstrs(i(I))           = nil .
    eq varstrs(b(B))           = nil .
    eq varstrs(v(S))           = S .
    eq varstrs(t(v(S), T))     = S .
    eq varstrs(t(Id, T))       = nil .
    eq varstrs(comp(nil))      = nil .
    eq varstrs(comp(Id Ids))   = append(varstrs(Id), varstrs(comp(Ids))) .

    op nonVarStrs : List{Id} -> List{String} .
    eq nonVarStrs(nil)          = nil .
    eq nonVarStrs(s(S))         = S .
    eq nonVarStrs(t(s(S), T))   = S .
    eq nonVarStrs(b(B))         = nil .
    eq nonVarStrs(i(I))         = nil .
    eq nonVarStrs(v(S))         = nil .
    eq nonVarStrs(comp(nil))    = nil .
    eq nonVarStrs(comp(Id Ids)) = append(nonVarStrs(Id), nonVarStrs(comp(Ids))) .

    op strlist : Id -> List{String} .
    eq strlist(s(S))           = S .
    eq strlist(i(I))           = nil .
    eq strlist(b(B))           = nil .
    eq strlist(v(S))           = S .
    eq strlist(t(Id, T))       = nil .
    eq strlist(comp(nil))      = nil .
    eq strlist(comp(Id Ids))   = append(strlist(Id), strlist(comp(Ids))) .

    op prependIds : Id Id -> Id .
    eq prependIds(Id, comp(Ids))          = comp(Id Ids) .
    eq prependIds(Id1, Id2)               = comp(Id1 Id2) [owise] .

    var C : Constraint .
    var Cs : List{Constraint} .
    op constraintIds : Constraint -> List{Id} .
    eq constraintIds(c(Id))    = idList(Id) .
    eq constraintIds(cs(nil))  = nil .
    eq constraintIds(cs(C Cs)) = append(constraintIds(C), constraintIds(cs(Cs))) .

    op isArith : String -> Bool .
    eq isArith("+") = true .
    eq isArith("-") = true .
    eq isArith("/") = true .
    eq isArith("*") = true .
    eq isArith("^") = true .
    eq isArith(S)   = false [owise] .

    op isStrOp : String -> Bool .
    eq isStrOp("..") = true .
    eq isStrOp(S)    = false [owise] .

    op typeList : EnkiType -> List{EnkiType} .
    eq typeList(func(T1, T2)) = T1 typeList(T2) .
    eq typeList(rule(T1, T2)) = T1 typeList(T2) .
    eq typeList(T)            = T [owise] .
endm

