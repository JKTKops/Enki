mod ENKI-TYPECHECK-ENV is
    protecting ENKI-SYNTAX-SORTS .
    protecting ENKI-TYPECHECK-SORTS .

    protecting SET{EnkiType} .
    protecting LIST{Id} .

    protecting CONVERSION .

    var I : Int .
    var S : String .
    var B : Bool .

    var T : EnkiType .
    var Ts : Set{EnkiType} .
    var TIDS : Set{TypedId} .
    var Id : Id .
    var L : List{TypedId} .
    var Ids : List{Id} .

    op firstUnused : Set{EnkiType} Int -> EnkiType .
    eq firstUnused(Ts, I) =
        if any("T" + string(I, 10)) in Ts then firstUnused(Ts, I + 1) else any("T" + string(I, 10)) fi .

    op types : Set{TypedId} -> Set{EnkiType} .
    eq types(empty)              = empty .
    eq types((tid(Id, T), TIDS)) = (T, types(TIDS)) .

    op freshtype : Set{TypedId} Id -> Set{TypedId} .
    eq freshtype(TIDS, Id) = (tid(Id, firstUnused(types(TIDS), 0)), TIDS) .

    op freshtypes : Set{TypedId} List{Id} -> Set{TypedId} .
    eq freshtypes(TIDS, nil)                    = TIDS .
    eq freshtypes((tid(Id, T), TIDS), (Id Ids)) = freshtypes((tid(Id, T), TIDS), Ids) .
    eq freshtypes(TIDS, (v(S) Ids))             = freshtypes(freshtype(TIDS, v(S)), Ids) .
    eq freshtypes(TIDS, (i(I) Ids))             = freshtypes((tid(i(I), int), TIDS), Ids) .
    eq freshtypes(TIDS, (b(B) Ids))             = freshtypes((tid(b(B), bool), TIDS), Ids) .
    eq freshtypes(TIDS, (s(S) Ids))             = freshtypes((tid(s(S), string), TIDS), Ids) .

    op typeSet : List{TypedId} -> Set{TypedId} .
    eq typeSet(nil)          = empty .
    eq typeSet(tid(Id, T) L) = (tid(Id, T), typeSet(L)) .

    op typeof : Set{TypedId} Id -> EnkiType .
    eq typeof((tid(Id, T), TIDS), Id) = T .
    eq typeof(TIDS, Id)               = firstUnused(types(TIDS), 0) [owise] .
endm

