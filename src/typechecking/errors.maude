mod ENKI-TYPECHECK-ERRORS is
    protecting ENKI-SYNTAX-UTILITY .
    protecting ENKI-TYPECHECK-SORTS .

    protecting LIST{Id} .
    protecting LIST{TypedDef} .

    op resolveError : Id -> TypedId .
    op constraintResolveError : Id -> TypedConstraint .
    op resolveFuncError : Id Id -> TypedFunc .
    op resolveRuleError : Id Id -> TypedRule .

    var S : String .
    var B : Bool .
    var I : Int .
    var T : EnkiType .

    vars Id Id1 Id2 : Id .
    var Ids : List{Id} .

    var TID : TypedId .

    vars TConstraint TConstraint1 TConstraint2 : TypedConstraint .
    var TConstraints : List{TypedConstraint} .

    --- Checks the typed id's and constraints for any unresolved references
    --- To be used after the resolving process is complete
    op check : TypedId -> TypedId .
    eq check(tid(v(S), T)) = tid(v(S), T) .
    eq check(tid(b(B), T)) = tid(b(B), T) .
    eq check(tid(i(I), T)) = tid(i(I), T) .
    eq check(tid(s(S), T)) = tid(s(S), T) .
    ceq check(TID)         = if isOp(S) then TID else resolveError(Id) fi
        if tid(Id, T) := TID /\ comp(Id1 s(S) Id2) := Id .
    ceq check(tid(comp(Id), T)) = resolveError(Id2)
        if resolveError(Id2) := check(tid(Id, T)) .
    eq check(tid(comp(Id), T)) = tid(comp(Id), T) .
    eq check(tid(comp(Ids), T)) = resolveError(comp(Ids)) .
    eq check(TID) = TID .

    op check : TypedConstraint -> TypedConstraint .
    ceq check(typed(TID)) = constraintResolveError(Id) if resolveError(Id) := check(TID) .

    ceq check(typedWhen(TConstraint1, TConstraint2)) = constraintResolveError(Id)
        if constraintResolveError(Id) := check(TConstraint1) .
    ceq check(typedWhen(TConstraint1, TConstraint2)) = constraintResolveError(Id)
        if constraintResolveError(Id) := check(TConstraint2) .

    ceq check(typedConstraints(TConstraint1 TConstraints)) = constraintResolveError(Id)
        if constraintResolveError(Id) := check(TConstraint1) .
    ceq check(typedConstraints(TConstraint1 TConstraints)) = constraintResolveError(Id)
        if constraintResolveError(Id) := check(typedConstraints(TConstraints)) .

    eq check(TConstraint1) = TConstraint1 .

    var TExpr : TypedExpr .

    op handleFuncError : Id EnkiType TypedConstraint TypedExpr -> TypedFunc .
    ceq handleFuncError(Id, T, TConstraint, TExpr) = resolveFuncError(Id, Id2)
        if typedExpr(resolveError(Id2)) := TExpr .
    ceq handleFuncError(Id, T, TConstraint, TExpr) = resolveFuncError(Id, Id2)
        if constraintResolveError(Id2) := TConstraint .
    eq handleFuncError(Id, T, TConstraint, TExpr) = typed(Id, T, TConstraint, TExpr) .

    op handleRuleError : Id EnkiType TypedConstraint -> TypedRule .
    ceq handleRuleError(Id, T, TConstraint) = resolveRuleError(Id, Id2)
        if constraintResolveError(Id2) := TConstraint .
    eq handleRuleError(Id, T, TConstraint) = typed(Id, T, TConstraint) .
endm

