load enki-typechecking.maude
load utility.maude

mod ENKI-CODEGEN is
    protecting ENKI-TYPECHECK .
    protecting UTILITY .

    protecting CONVERSION .
    protecting MAP{String, String} .

    sort GenResult .

    op genRes : Int Map{String, String} String -> GenResult .

    var Id Id1 Id2 : Id .
    vars S S1 S2 : String .
    vars Strs Current : List{String} .
    var I NewI : Int .
    var T T2 : EnkiType .
    var Types : List{EnkiType} .
    var Tid : TypedId .
    vars Name ResName Params : String .

    op eqSign : EnkiType -> String .
    ceq eqSign(T) = "#="
        if returnType(T) = int .
    eq eqSign(T) = "=" [owise] .

    op prologArith : String -> String .
    eq prologArith("+") = "+" .
    eq prologArith("-") = "-" .
    eq prologArith("/") = "div" .
    eq prologArith("*") = "*" .
    eq prologArith("^") = "^" .

    var VarMap FuncMap : Map{String, Id} .
    var Ids : List{Id} .
    var FuncId : Id .
    var NewLine : String .

    var FuncTypes : List{EnkiType} .

    vars StrVarMap NewVarMap : Map{String, String} .

    op mapVars : List{String} Map{String, String} -> List{String} .
    eq mapVars(nil, StrVarMap) = nil .
    eq mapVars(S Strs, (S |-> S2, StrVarMap)) = S2 mapVars(Strs, StrVarMap) .

    op idMap : List{String} -> Map{String, String} .
    eq idMap(nil) = empty .
    eq idMap(S Strs) = (S |-> S, idMap(Strs)) .

    op genFuncCallParams : Id Map{String, String} String -> String .
    eq genFuncCallParams(FuncId, StrVarMap, ResName) =
        intercalate("_", strlist(FuncId)) + "(" + intercalate(",", mapVars(varstrs(varlist(FuncId)), StrVarMap) ResName) + ")" .

    op genFuncCall : Id String -> String .
    eq genFuncCall(FuncId, ResName) = genFuncCallParams(FuncId, idMap(varstrs(varlist(FuncId))), ResName) .

    var Lines : List{String} .
    vars I1 I2 FinalI : Int .
    vars Vars1 Vars2 : Map{String, Id} .

    vars Line NewIdStr Str : String .
    var TempVarMap AllVars : Map{String, String} .

    op genParams : List{EnkiType} List{Id} Map{String, Id} List{String} Int -> GenResult .
    eq genParams(Types, nil, VarMap, Current, I) = genRes(I, empty, intercalate(",\n", Current)) .
    ceq genParams(T Types, v(S) Ids, (S |-> fcall(FuncId, FuncTypes, FuncMap), VarMap), Current, I) =
        genRes(FinalI, (S |-> NewIdStr, AllVars), Str)
        if genRes(NewI, NewVarMap, Line) := genParams(FuncTypes, varlist(FuncId), FuncMap, nil, I) /\
           NewIdStr                      := "Temp" + string(NewI, 10) /\
           NewLine                       := genFuncCallParams(FuncId, NewVarMap, NewIdStr) /\
           genRes(FinalI, AllVars, Str)  := genParams(Types, Ids, VarMap, Line NewLine Current, NewI + 1) .
    ceq genParams(T Types, v(S) Ids, (S |-> Id, VarMap), Current, I) =
        genRes(FinalI, (S |-> NewIdStr, NewVarMap), Str)
        if NewIdStr                       := "Temp" + string(I, 10) /\
           NewLine                        := NewIdStr + " " + eqSign(T) + " " + genId(Id) /\
           genRes(FinalI, NewVarMap, Str) := genParams(Types, Ids, VarMap, NewLine Current, I + 1) .

    op genId : Id -> String .
    eq genId(v(S)) = S .
    eq genId(s(S)) = "\"" + S + "\"" .
    eq genId(i(I)) = string(I, 10) .
    ceq genId(comp(Id1 s(S) Id2)) = "(" + genId(Id1) + " " + prologArith(S) + " " + genId(Id2) + ")"
        if isArith(S) .

    op genFunc : TypedFunc -> String .
    ceq genFunc(typedf(Id, T, typedExpr(tid(fcall(FuncId, Types, VarMap), T2)))) =
        genFuncCall(Id, ResName) + " :- \n" +
        Str + ",\n" +
        genFuncCallParams(FuncId, AllVars, ResName) + "."
        if ResName := intercalate("_", strlist(Id)) + "_Result" /\
           genRes(FinalI, AllVars, Str) := genParams(Types, varlist(FuncId), VarMap, nil, 0) .
    ceq genFunc(typedf(FuncId, T, typedExpr(tid(Id2, T2)))) =
        genFuncCall(FuncId, ResName) + " :- " + ResName + " " + eqSign(T) + " " + genId(Id2) + "."
        if ResName := intercalate("_", strlist(FuncId)) + "_Result" [owise] .

    var TFunc : TypedFunc .
    var TFuncs : List{TypedFunc} .
    op genFuncs : List{TypedFunc} -> String .
    eq genFuncs(nil)          = "" .
    eq genFuncs(TFunc TFuncs) = intercalate("\n\n", genFunc(TFunc) genFuncs(TFuncs)) .
endm

