load enki-typechecking.maude
load utility.maude

mod ENKI-CODEGEN is
    protecting ENKI-TYPECHECK .
    protecting UTILITY .

    protecting CONVERSION .

    var Id Id1 Id2 : Id .
    var S : String .
    var I : Int .
    var T T2 : EnkiType .
    var Tid : TypedId .
    vars Name ResName Params : String .

    op eqSign : EnkiType -> String .
    ceq eqSign(T) = "#="
        if returnType(T) = int .
    eq eqSign(T) = "=" [owise] .

    op prologArith : String -> String .
    eq prologArith("+") = "+" .
    eq prologArith("-") = "-" .
    eq prologArith("/") = "div" .
    eq prologArith("*") = "*" .

    op genId : Id -> String .
    eq genId(v(S)) = S .
    eq genId(s(S)) = "\"" + S + "\"" .
    eq genId(i(I)) = string(I, 10) .
    ceq genId(comp(Id1, s(S), Id2)) = "(" + genId(Id1) + " " + prologArith(S) + " " + genId(Id2) + ")"
        if isArith(S) .

    op genFunc : TypedFunc -> String .
    ceq genFunc(typedf(Id, T, typedExpr(tid(Id2, T2)))) =
        Name + "(" + Params + ") :- " + ResName + " " + eqSign(T) + " " + genId(Id2) + "."
        if Name := intercalate("_", strlist(Id)) /\
           ResName := Name + "_Result" /\
           Params := intercalate(",", varstrs(varlist(Id)) ResName) .
endm

