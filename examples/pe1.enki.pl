#!/usr/bin/env swipl

:- use_module(library(clpfd)).

:- style_check(-singleton).
:- style_check(-no_effect).
:- style_check(-var_branches).
:- style_check(-discontiguous).
:- style_check(-charset).

:- initialization(main, main).

main(Argv) :-
    answer_less_than(999,Temp98),
    as_text(Temp98,Temp99),
    display(Temp99).
% EnkiString
display(X) :-
    writeln(X).

% FuncType (Any "T3") EnkiString
as_text(X,Temp0) :-
    term_to_atom(X,Temp0).

% FuncType (Any "T6") (Any "T6")
the(X,X).

% FuncType (Any "T8") (Any "T8")
id(X,X).

% EnkiInt
odd(X) :-
    Temp1 #= (2 * K),
    Temp2 #= (Temp1 + 1),
    X = Temp2.

% EnkiInt
even(X) :-
    Temp3 #= (2 * K),
    X = Temp3.

% FuncType EnkiInt EnkiInt
square_root(X,Root) :-
    Temp4 #= (Root ^ 2),
    Temp4 = X.

% RuleType EnkiInt EnkiInt
divides(A,B) :-
    Temp5 #= (A * N),
    B = Temp5.

% FuncType (Any "T29") (FuncType (TypeName [Named "list",Any "T29"]) (TypeName [Named "list",Any "T29"]))
prepend_to(Head,Tail,cons(Head,Tail)).

% FuncType (TypeName [Named "list",Any "T46"]) EnkiInt
length_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            length_of(T,Temp6),
            Temp7 #= (1 + Temp6),
            AUTOGENERATEDFUNCTIONRESULT = Temp7
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType (Any "T59") (FuncType (TypeName [Named "list",Any "T59"]) (TypeName [Named "list",Any "T59"]))
construct(Head,Full,Tail) :-
    Full = cons(Head,Tail).

% FuncType (TypeName [Named "list",Any "T86"]) (FuncType (TypeName [Named "list",Any "T86"]) (TypeName [Named "list",Any "T86"]))
concat_with(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            concat_with(T,B,Temp8),
            prepend_to(H,Temp8,Temp9),
            AUTOGENERATEDFUNCTIONRESULT = Temp9
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",TypeName [Named "list",Any "T115"]]) (TypeName [Named "list",Any "T115"])
flatten(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            flatten(T,Temp10),
            concat_with(H,Temp10,Temp11),
            AUTOGENERATEDFUNCTIONRESULT = Temp11
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T146"]) (FuncType (TypeName [Named "list",Any "T146"]) (TypeName [Named "list",Any "T146"]))
reverseAcc(A,Acc,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            reverseAcc(T,cons(H,Acc),Temp12),
            AUTOGENERATEDFUNCTIONRESULT = Temp12
        ;
            AUTOGENERATEDFUNCTIONRESULT = Acc
    ).

% FuncType (TypeName [Named "list",Any "T155"]) (TypeName [Named "list",Any "T155"])
reverse_list(A,Temp13) :-
    reverseAcc(A,empty(),Temp13).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
sum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            sum_of(T,Temp14),
            Temp15 #= (H + Temp14),
            AUTOGENERATEDFUNCTIONRESULT = Temp15
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",Any "T198"]))
multiples_of_in(A,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            divides(A,H)
            ->
            multiples_of_in(A,T,Temp16),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp16)
        ;
        (
                List = cons(H,T)
                ->
                multiples_of_in(A,T,Temp17),
                AUTOGENERATEDFUNCTIONRESULT = Temp17
            ;
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (TypeName [Named "list",Any "T260"]) EnkiString
formatHelper(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            as_text(H,Temp18),
            atom_concat(Temp18,"]",Temp19),
            AUTOGENERATEDFUNCTIONRESULT = Temp19
        ;
        (
                List = cons(H,T)
                ->
                as_text(H,Temp20),
                atom_concat(Temp20,",",Temp21),
                formatHelper(T,Temp22),
                atom_concat(Temp21,Temp22,Temp23),
                AUTOGENERATEDFUNCTIONRESULT = Temp23
            ;
                AUTOGENERATEDFUNCTIONRESULT = "]"
        )
    ).

% FuncType (TypeName [Named "list",Any "T273"]) EnkiString
format_list(List,Temp25) :-
    formatHelper(List,Temp24),
    atom_concat("[",Temp24,Temp25).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",Any "T283"]))
range_to(Low,High,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Low #> High
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            Temp26 #= (Low + 1),
            range_to(Temp26,High,Temp27),
            AUTOGENERATEDFUNCTIONRESULT = cons(Low,Temp27)
    ).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",Any "T304"]))
range_from_to(Low,High,Temp28) :-
    range_to(Low,High,Temp28).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",Any "T310"]))
integers_from_to(Low,High,Temp29) :-
    range_to(Low,High,Temp29).

% FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",Any "T326"])
inc(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            Temp30 #= (H + 1),
            inc(T,Temp31),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp30,Temp31)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T382"]) (FuncType (TypeName [Named "list",Any "T383"]) (TypeName [Named "list",Any "T364"]))
zip_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(HA,TA),
            B = cons(HB,TB)
            ->
            zip_and(TA,TB,Temp32),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(HA,HB),Temp32)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
max_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
min_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
maximum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                maximum_of(T,Temp33),
                max_of_and(H,Temp33,Temp34),
                AUTOGENERATEDFUNCTIONRESULT = Temp34
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
minimum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                minimum_of(T,Temp35),
                min_of_and(H,Temp35,Temp36),
                AUTOGENERATEDFUNCTIONRESULT = Temp36
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
find_factor_of_starting_with(N,X,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            divides(X,N)
            ->
            AUTOGENERATEDFUNCTIONRESULT = X
        ;
            Temp37 #= (X + 1),
            find_factor_of_starting_with(N,Temp37,Temp38),
            AUTOGENERATEDFUNCTIONRESULT = Temp38
    ).

% FuncType EnkiInt (TypeName [Named "list",Any "T511"])
factors_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N = 1
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            find_factor_of_starting_with(N,2,Temp39),
            Factor = Temp39,
            Temp40 #= (N div Factor),
            factors_of(Temp40,Temp41),
            AUTOGENERATEDFUNCTIONRESULT = cons(Factor,Temp41)
    ).

% FuncType EnkiInt (TypeName [Named "list",Any "T541"])
digits_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #< 10
            ->
            AUTOGENERATEDFUNCTIONRESULT = cons(N,empty())
        ;
            Temp42 #= (10 * Rest),
            Temp43 #= (Temp42 + Digit),
            N = Temp43,
            Digit #>= 0,
            Digit #< 10,
            digits_of(Rest,Temp44),
            AUTOGENERATEDFUNCTIONRESULT = cons(Digit,Temp44)
    ).

% TypeName [Named "list",Any "T569"]
palindrome(List) :-
    reverse_list(List,Temp45),
    Temp45 = List.

% EnkiInt
palindromic_number(N) :-
    digits_of(N,Temp46),
    palindrome(Temp46).

% FuncType (Any "T606") (FuncType (TypeName [Named "list",Any "T607"]) (TypeName [Named "list",Any "T588"]))
pair_with_each(X,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            pair_with_each(X,T,Temp47),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(X,H),Temp47)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T650"]) (FuncType (TypeName [Named "list",Any "T651"]) (TypeName [Named "list",Any "T630"]))
cartesian_product_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            pair_with_each(H,B,Temp48),
            cartesian_product_of_and(T,B,Temp49),
            concat_with(Temp48,Temp49,Temp50),
            AUTOGENERATEDFUNCTIONRESULT = Temp50
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T663"]) (FuncType (TypeName [Named "list",Any "T664"]) (TypeName [Named "list",Any "T665"]))
pairs_of_and(A,B,Temp51) :-
    cartesian_product_of_and(A,B,Temp51).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T692"]) (TypeName [Named "list",Any "T692"]))
take_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp52 #= (N - 1),
            take_from(Temp52,T,Temp53),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp53)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T718"]) (TypeName [Named "list",Any "T718"]))
drop_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp54 #= (N - 1),
            drop_from(Temp54,T,Temp55),
            AUTOGENERATEDFUNCTIONRESULT = Temp55
        ;
            AUTOGENERATEDFUNCTIONRESULT = List
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
product_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            product_of(T,Temp56),
            Temp57 #= (H * Temp56),
            AUTOGENERATEDFUNCTIONRESULT = Temp57
        ;
            AUTOGENERATEDFUNCTIONRESULT = 1
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T768"]) (FuncType (Any "T776") (Any "T776")))
element_of_starting_with(N,List,H,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #=< 0
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(X,Rest)
                ->
                Temp58 #= (N - 1),
                element_of_starting_with(Temp58,Rest,X,Temp59),
                AUTOGENERATEDFUNCTIONRESULT = Temp59
            ;
                AUTOGENERATEDFUNCTIONRESULT = H
        )
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T821"]) (TypeName [Named "list",Any "T789"]))
chunks_of_size_in(L,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = empty()
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            take_from(L,List,Temp60),
            drop_from(L,List,Temp61),
            chunks_of_size_in(L,Temp61,Temp62),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp60,Temp62)
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T828"]) (TypeName [Named "list",Any "T829"]))
chunks_of_length_in(L,List,Temp63) :-
    chunks_of_size_in(L,List,Temp63).

% RuleType (TypeName [Named "list",Any "T842"]) (Any "T842")
contains(List,Element) :-
    (
            List = cons(H,T),
            H = Element
            ->
            1 = 1
        ;
        (
                List = cons(H,T)
                ->
                contains(T,Element)
            ;
                1 = 2
        )
    ).

% FuncType (Any "T876") (FuncType (TypeName [Named "list",Any "T877"]) (TypeName [Named "list",Any "T877"]))
remove_from(Element,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            H = Element
            ->
            AUTOGENERATEDFUNCTIONRESULT = T
        ;
        (
                List = cons(H,T)
                ->
                remove_from(Element,T,Temp64),
                AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp64)
            ;
                1 = 2,
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (Any "T891") (FuncType (Any "T892") (TypeName [Named "mapping",Any "T891",Any "T892"]))
maps_to(X,Y,pipe_dash_gt_(X,Y)).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "ordering"]))
compare_to(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = greater()
        ;
        (
                A #< B
                ->
                AUTOGENERATEDFUNCTIONRESULT = less()
            ;
                AUTOGENERATEDFUNCTIONRESULT = equal()
        )
    ).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T916"]) (FuncType (TypeName [Named "mapping",EnkiInt,Any "T925"]) (TypeName [Named "ordering"]))
compare_keys_to(AUTOGENARG3,AUTOGENARG5,Temp65) :-
    AUTOGENARG3 = pipe_dash_gt_(K1,V1),
    AUTOGENARG5 = pipe_dash_gt_(K2,V2),
    compare_to(K1,K2,Temp65).

% FuncType (TypeName [Named "mapping",Any "T938",EnkiInt]) (FuncType (TypeName [Named "mapping",Any "T947",EnkiInt]) (TypeName [Named "ordering"]))
compare_values_to(AUTOGENARG3,AUTOGENARG5,Temp66) :-
    AUTOGENARG3 = pipe_dash_gt_(K1,V1),
    AUTOGENARG5 = pipe_dash_gt_(K2,V2),
    compare_to(V1,V2,Temp66).

% FuncType (Any "T967") (FuncType (TypeName [Named "list",Any "T959"]) (Any "T968"))
get_key_from(Key,Map,V) :-
    contains(Map,pipe_dash_gt_(Key,V)).

% FuncType (Any "T984") (FuncType (Any "T985") (FuncType (TypeName [Named "list",Any "T976"]) (TypeName [Named "list",Any "T976"])))
insert_into(K,V,Map,cons(pipe_dash_gt_(K,V),Map)).

% FuncType (Any "T1002") (FuncType (TypeName [Named "list",Any "T993"]) (TypeName [Named "list",Any "T993"]))
remove_key_from(Key,Map,Temp67) :-
    remove_from(pipe_dash_gt_(Key,V),Map,Temp67).

% FuncType (Any "T1040") (FuncType (TypeName [Named "list",Any "T1032"]) (TypeName [Named "list",Any "T1032"]))
increment_key_in(Key,Map,Temp70) :-
    Temp69 #= (V + 1),
    remove_from(pipe_dash_gt_(Key,V),Map,Temp68),
    insert_into(Key,Temp69,Temp68,Temp70).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T1083"]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1084"]]) (TypeName [Named "mapping",EnkiInt,Any "T1083"]))
max_key_at_least_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_keys_to(M2,M1,Temp71),
            Temp71 = less()
            ->
            max_key_at_least_in(M2,Assocs,Temp72),
            AUTOGENERATEDFUNCTIONRESULT = Temp72
        ;
        (
                Map = cons(P,Assocs)
                ->
                max_key_at_least_in(M1,Assocs,Temp73),
                AUTOGENERATEDFUNCTIONRESULT = Temp73
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1113"]]) (TypeName [Named "maybe",TypeName [Named "mapping",EnkiInt,Any "T1113"]])
max_key_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            max_key_at_least_in(M1,Map,Temp74),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp74)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T1158"]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1159"]]) (TypeName [Named "mapping",EnkiInt,Any "T1158"]))
min_key_no_more_than_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_keys_to(M2,M1,Temp75),
            Temp75 = less()
            ->
            min_key_no_more_than_in(M2,Assocs,Temp76),
            AUTOGENERATEDFUNCTIONRESULT = Temp76
        ;
        (
                Map = cons(P,Assocs)
                ->
                min_key_no_more_than_in(M1,Assocs,Temp77),
                AUTOGENERATEDFUNCTIONRESULT = Temp77
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1188"]]) (TypeName [Named "maybe",TypeName [Named "mapping",EnkiInt,Any "T1188"]])
min_key_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            min_key_no_more_than_in(M1,Map,Temp78),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp78)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",Any "T1233",EnkiInt]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1234",EnkiInt]]) (TypeName [Named "mapping",Any "T1233",EnkiInt]))
max_value_at_least_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_values_to(M2,M1,Temp79),
            Temp79 = less()
            ->
            max_value_at_least_in(M2,Assocs,Temp80),
            AUTOGENERATEDFUNCTIONRESULT = Temp80
        ;
        (
                Map = cons(P,Assocs)
                ->
                max_value_at_least_in(M1,Assocs,Temp81),
                AUTOGENERATEDFUNCTIONRESULT = Temp81
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1263",EnkiInt]]) (TypeName [Named "maybe",TypeName [Named "mapping",Any "T1263",EnkiInt]])
max_value_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            max_value_at_least_in(M1,Map,Temp82),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp82)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",Any "T1308",EnkiInt]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1309",EnkiInt]]) (TypeName [Named "mapping",Any "T1308",EnkiInt]))
min_value_no_more_than_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_values_to(M2,M1,Temp83),
            Temp83 = less()
            ->
            min_value_no_more_than_in(M2,Assocs,Temp84),
            AUTOGENERATEDFUNCTIONRESULT = Temp84
        ;
        (
                Map = cons(P,Assocs)
                ->
                min_value_no_more_than_in(M1,Assocs,Temp85),
                AUTOGENERATEDFUNCTIONRESULT = Temp85
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1338",EnkiInt]]) (TypeName [Named "maybe",TypeName [Named "mapping",Any "T1338",EnkiInt]])
min_value_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            min_value_no_more_than_in(M1,Map,Temp86),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp86)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType EnkiInt EnkiInt
answer_less_than(N,Temp97) :-
    range_to(1,N,Temp87),
    multiples_of_in(3,Temp87,Temp88),
    ThreeMult = Temp88,
    range_to(1,N,Temp89),
    multiples_of_in(5,Temp89,Temp90),
    FiveMult = Temp90,
    range_to(1,N,Temp91),
    multiples_of_in(15,Temp91,Temp92),
    FifteenMult = Temp92,
    sum_of(ThreeMult,Temp93),
    sum_of(FiveMult,Temp94),
    Temp95 #= (Temp93 + Temp94),
    sum_of(FifteenMult,Temp96),
    Temp97 #= (Temp95 - Temp96).