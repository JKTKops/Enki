#!/usr/bin/env swipl

:- use_module(library(clpfd)).

:- style_check(-singleton).
:- style_check(-no_effect).
:- style_check(-var_branches).
:- style_check(-discontiguous).
:- style_check(-charset).

:- initialization(main, main).

main(Argv) :-
    mod(3109,10,Temp115),
    as_text(Temp115,Temp114),
    display(Temp114),
    digits_from("231832",Temp118),
    format_list(Temp118,Temp117),
    display(Temp117),
    to_digits(1809,Temp121),
    format_list(Temp121,Temp120),
    display(Temp120),
    int_from("231832",Temp124),
    as_text(Temp124,Temp123),
    display(Temp123).
% EnkiString
display(X) :-
    writeln(X).

% FuncType (Any "T3") EnkiString
as_text(X,Temp1) :-
    term_to_atom(X,Temp1).

% FuncType (Any "T6") (Any "T6")
the(X,X).

% FuncType (Any "T8") (Any "T8")
id(X,X).

% EnkiInt
odd(X) :-
    Temp2 #= (2 * K),
    Temp3 #= (Temp2 + 1),
    X = Temp3.

% EnkiInt
even(X) :-
    Temp4 #= (2 * K),
    X = Temp4.

% FuncType EnkiInt EnkiInt
square_root(X,Root) :-
    Temp5 #= (Root ^ 2),
    Temp5 = X.

% RuleType EnkiInt EnkiInt
divides(A,B) :-
    Temp6 #= (A * N),
    B = Temp6.

% FuncType (Any "T29") (FuncType (TypeName [Named "list",Any "T29"]) (TypeName [Named "list",Any "T29"]))
prepend_to(Head,Tail,cons(Head,Tail)).

% FuncType (TypeName [Named "list",Any "T46"]) EnkiInt
length_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            length_of(T,Temp8),
            Temp9 #= (1 + Temp8),
            AUTOGENERATEDFUNCTIONRESULT = Temp9
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType (Any "T59") (FuncType (TypeName [Named "list",Any "T59"]) (TypeName [Named "list",Any "T59"]))
construct(Head,Full,Tail) :-
    Full = cons(Head,Tail).

% FuncType (TypeName [Named "list",Any "T86"]) (FuncType (TypeName [Named "list",Any "T78"]) (TypeName [Named "list",Any "T78"]))
concat_with(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            concat_with(T,B,Temp10),
            prepend_to(H,Temp10,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",TypeName [Named "list",Any "T116"]]) (TypeName [Named "list",Any "T109"])
flatten(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            flatten(T,Temp11),
            concat_with(H,Temp11,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T147"]) (FuncType (TypeName [Named "list",Any "T147"]) (TypeName [Named "list",Any "T147"]))
reverseAcc(A,Acc,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            reverseAcc(T,cons(H,Acc),AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = Acc
    ).

% FuncType (TypeName [Named "list",Any "T156"]) (TypeName [Named "list",Any "T156"])
reverse_list(A,Temp13) :-
    reverseAcc(A,empty(),Temp13).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
sum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            sum_of(T,Temp15),
            Temp16 #= (H + Temp15),
            AUTOGENERATEDFUNCTIONRESULT = Temp16
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",EnkiInt]))
multiples_of_in(A,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            divides(A,H)
            ->
            multiples_of_in(A,T,Temp18),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp18)
        ;
        (
                List = cons(H,T)
                ->
                multiples_of_in(A,T,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (TypeName [Named "list",Any "T261"]) EnkiString
formatHelper(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            as_text(H,Temp20),
            atom_concat(Temp20,"]",AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                List = cons(H,T)
                ->
                as_text(H,Temp22),
                atom_concat(Temp22,",",Temp21),
                formatHelper(T,Temp23),
                atom_concat(Temp21,Temp23,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = "]"
        )
    ).

% FuncType (TypeName [Named "list",Any "T274"]) EnkiString
format_list(List,Temp24) :-
    formatHelper(List,Temp25),
    atom_concat("[",Temp25,Temp24).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",EnkiInt]))
range_to(Low,High,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Low #> High
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            Temp27 #= (Low + 1),
            range_to(Temp27,High,Temp26),
            AUTOGENERATEDFUNCTIONRESULT = cons(Low,Temp26)
    ).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",EnkiInt]))
range_from_to(Low,High,Temp28) :-
    range_to(Low,High,Temp28).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",EnkiInt]))
integers_from_to(Low,High,Temp29) :-
    range_to(Low,High,Temp29).

% FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",EnkiInt])
inc(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            Temp30 #= (H + 1),
            inc(T,Temp31),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp30,Temp31)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T381"]) (FuncType (TypeName [Named "list",Any "T382"]) (TypeName [Named "list",TypeName [Named "pair",Any "T365",Any "T366"]]))
zip_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(HA,TA),
            B = cons(HB,TB)
            ->
            zip_and(TA,TB,Temp33),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(HA,HB),Temp33)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
max_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
min_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
maximum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                maximum_of(T,Temp35),
                max_of_and(H,Temp35,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
minimum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                minimum_of(T,Temp37),
                min_of_and(H,Temp37,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
find_factor_of_starting_with(N,X,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            divides(X,N)
            ->
            AUTOGENERATEDFUNCTIONRESULT = X
        ;
            Temp39 #= (X + 1),
            find_factor_of_starting_with(N,Temp39,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
    ).

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
factors_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N = 1
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            find_factor_of_starting_with(N,2,Factor),
            Factor = Factor,
            Temp41 #= (N div Factor),
            factors_of(Temp41,Temp40),
            AUTOGENERATEDFUNCTIONRESULT = cons(Factor,Temp40)
    ).

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
digits_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #< 10
            ->
            AUTOGENERATEDFUNCTIONRESULT = cons(N,empty())
        ;
            Temp43 #= (10 * Rest),
            Temp44 #= (Temp43 + Digit),
            N = Temp44,
            Digit #>= 0,
            Digit #< 10,
            digits_of(Rest,Temp45),
            AUTOGENERATEDFUNCTIONRESULT = cons(Digit,Temp45)
    ).

% TypeName [Named "list",Any "T568"]
palindrome(List) :-
    reverse_list(List,List),
    List = List.

% EnkiInt
palindromic_number(N) :-
    digits_of(N,Temp47),
    palindrome(Temp47).

% FuncType (Any "T603") (FuncType (TypeName [Named "list",Any "T604"]) (TypeName [Named "list",TypeName [Named "pair",Any "T587",Any "T588"]]))
pair_with_each(X,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            pair_with_each(X,T,Temp49),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(X,H),Temp49)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T650"]) (FuncType (TypeName [Named "list",Any "T651"]) (TypeName [Named "list",Any "T628"]))
cartesian_product_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            pair_with_each(H,B,Temp50),
            cartesian_product_of_and(T,B,Temp51),
            concat_with(Temp50,Temp51,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T663"]) (FuncType (TypeName [Named "list",Any "T664"]) (TypeName [Named "list",Any "T665"]))
pairs_of_and(A,B,Temp52) :-
    cartesian_product_of_and(A,B,Temp52).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T692"]) (TypeName [Named "list",Any "T683"]))
take_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp54 #= (N - 1),
            take_from(Temp54,T,Temp53),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp53)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T718"]) (TypeName [Named "list",Any "T718"]))
drop_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp55 #= (N - 1),
            drop_from(Temp55,T,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = List
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
product_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            product_of(T,Temp56),
            Temp57 #= (H * Temp56),
            AUTOGENERATEDFUNCTIONRESULT = Temp57
        ;
            AUTOGENERATEDFUNCTIONRESULT = 1
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T768"]) (FuncType (Any "T776") (Any "T776")))
element_of_starting_with(N,List,H,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #=< 0
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(X,Rest)
                ->
                Temp58 #= (N - 1),
                element_of_starting_with(Temp58,Rest,X,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = H
        )
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T823"]) (TypeName [Named "list",TypeName [Named "list",Any "T796"]]))
chunks_of_size_in(L,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = empty()
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            take_from(L,List,Temp59),
            drop_from(L,List,Temp61),
            chunks_of_size_in(L,Temp61,Temp60),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp59,Temp60)
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T830"]) (TypeName [Named "list",TypeName [Named "list",Any "T831"]]))
chunks_of_length_in(L,List,Temp62) :-
    chunks_of_size_in(L,List,Temp62).

% RuleType (TypeName [Named "list",Any "T844"]) (Any "T844")
contains(List,Element) :-
    (
            List = cons(H,T),
            H = Element
            ->
            1 = 1
        ;
        (
                List = cons(H,T)
                ->
                contains(T,Element)
            ;
                1 = 2
        )
    ).

% FuncType (Any "T878") (FuncType (TypeName [Named "list",Any "T878"]) (TypeName [Named "list",Any "T878"]))
remove_from(Element,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            H = Element
            ->
            AUTOGENERATEDFUNCTIONRESULT = T
        ;
        (
                List = cons(H,T)
                ->
                remove_from(Element,T,Temp64),
                AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp64)
            ;
                1 = 2,
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (Any "T892") (FuncType (Any "T893") (TypeName [Named "mapping",Any "T892",Any "T893"]))
maps_to(X,Y,pipe_dash_gt_(X,Y)).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "ordering"]))
compare_to(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = greater()
        ;
        (
                A #< B
                ->
                AUTOGENERATEDFUNCTIONRESULT = less()
            ;
                AUTOGENERATEDFUNCTIONRESULT = equal()
        )
    ).

% FuncType (TypeName [Named "mapping",Any "T915",Any "T916"]) (Any "T915")
key_in(AUTOGENARG3,K) :-
    maps_to(K,V,AUTOGENARG3),
    AUTOGENARG3 = AUTOGENARG3.

% FuncType (TypeName [Named "mapping",Any "T926",Any "T927"]) (Any "T927")
value_in(AUTOGENARG3,V) :-
    maps_to(K,V,AUTOGENARG3),
    AUTOGENARG3 = AUTOGENARG3.

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T939"]) (FuncType (TypeName [Named "mapping",EnkiInt,Any "T948"]) (TypeName [Named "ordering"]))
compare_keys_to(AUTOGENARG3,AUTOGENARG5,Temp66) :-
    AUTOGENARG3 = pipe_dash_gt_(K1,V1),
    AUTOGENARG5 = pipe_dash_gt_(K2,V2),
    compare_to(K1,K2,Temp66).

% FuncType (TypeName [Named "mapping",Any "T961",EnkiInt]) (FuncType (TypeName [Named "mapping",Any "T970",EnkiInt]) (TypeName [Named "ordering"]))
compare_values_to(AUTOGENARG3,AUTOGENARG5,Temp67) :-
    AUTOGENARG3 = pipe_dash_gt_(K1,V1),
    AUTOGENARG5 = pipe_dash_gt_(K2,V2),
    compare_to(V1,V2,Temp67).

% FuncType (Any "T990") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T990",Any "T991"]]) (Any "T991"))
get_key_from(Key,Map,V) :-
    contains(Map,pipe_dash_gt_(Key,V)).

% FuncType (Any "T1007") (FuncType (Any "T1008") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1007",Any "T1008"]]) (TypeName [Named "list",TypeName [Named "mapping",Any "T1007",Any "T1008"]])))
insert_into(K,V,Map,cons(pipe_dash_gt_(K,V),Map)).

% FuncType (Any "T1024") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1024",Any "T1025"]]) (TypeName [Named "list",TypeName [Named "mapping",Any "T1024",Any "T1025"]]))
remove_key_from(Key,Map,Temp72) :-
    remove_from(pipe_dash_gt_(Key,V),Map,Temp72).

% FuncType (Any "T1059") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1059",EnkiInt]]) (TypeName [Named "list",TypeName [Named "mapping",Any "T1059",EnkiInt]]))
increment_key_in(Key,Map,Temp74) :-
    Temp77 #= (V + 1),
    remove_from(pipe_dash_gt_(Key,V),Map,Temp75),
    insert_into(Key,Temp77,Temp75,Temp74).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T1102"]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1103"]]) (TypeName [Named "mapping",EnkiInt,Any "T1102"]))
max_key_at_least_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_keys_to(M2,M1,Temp78),
            Temp78 = less()
            ->
            max_key_at_least_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                max_key_at_least_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1132"]]) (TypeName [Named "maybe",TypeName [Named "mapping",EnkiInt,Any "T1132"]])
max_key_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            max_key_at_least_in(M1,Map,Temp80),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp80)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T1177"]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1178"]]) (TypeName [Named "mapping",EnkiInt,Any "T1177"]))
min_key_no_more_than_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_keys_to(M2,M1,Temp81),
            Temp81 = less()
            ->
            min_key_no_more_than_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                min_key_no_more_than_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1207"]]) (TypeName [Named "maybe",TypeName [Named "mapping",EnkiInt,Any "T1207"]])
min_key_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            min_key_no_more_than_in(M1,Map,Temp83),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp83)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",Any "T1252",EnkiInt]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1253",EnkiInt]]) (TypeName [Named "mapping",Any "T1252",EnkiInt]))
max_value_at_least_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_values_to(M2,M1,Temp84),
            Temp84 = less()
            ->
            max_value_at_least_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                max_value_at_least_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1282",EnkiInt]]) (TypeName [Named "maybe",TypeName [Named "mapping",Any "T1282",EnkiInt]])
max_value_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            max_value_at_least_in(M1,Map,Temp86),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp86)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",Any "T1327",EnkiInt]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1328",EnkiInt]]) (TypeName [Named "mapping",Any "T1327",EnkiInt]))
min_value_no_more_than_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_values_to(M2,M1,Temp87),
            Temp87 = less()
            ->
            min_value_no_more_than_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                min_value_no_more_than_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1357",EnkiInt]]) (TypeName [Named "maybe",TypeName [Named "mapping",Any "T1357",EnkiInt]])
min_value_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            min_value_no_more_than_in(M1,Map,Temp89),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp89)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (Any "T1367") (TypeName [Named "list",Any "T1367"])
singleton(X,cons(X,empty())).

% FuncType (TypeName [Named "list",Any "T1404"]) (TypeName [Named "list",Any "T1386"])
init(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
        (
                List = cons(H,T)
                ->
                init(T,Temp93),
                AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp93)
            ;
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (TypeName [Named "list",Any "T1440"]) (TypeName [Named "maybe",Any "T1440"])
last(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = just(H)
        ;
        (
                List = cons(H,T)
                ->
                last(T,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = nothing()
        )
    ).

% RuleType (TypeName [Named "list",Any "T1459"]) (Any "T1459")
does_not_contain(List,Element) :-
    (
            List = cons(Element,T)
            ->
            1 = 2
        ;
        (
                List = cons(H,T),
                H \= Element
                ->
                does_not_contain(T,Element)
            ;
                1 = 1
        )
    ).

% FuncType EnkiString (TypeName [Named "pair",EnkiInt,EnkiString])
digit_from(Str,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            atom_concat("0",Rest,Str),
            Str = Str
            ->
            AUTOGENERATEDFUNCTIONRESULT = pair_and(0,Rest)
        ;
        (
                atom_concat("1",Rest,Str),
                Str = Str
                ->
                AUTOGENERATEDFUNCTIONRESULT = pair_and(1,Rest)
            ;
            (
                    atom_concat("2",Rest,Str),
                    Str = Str
                    ->
                    AUTOGENERATEDFUNCTIONRESULT = pair_and(2,Rest)
                ;
                (
                        atom_concat("3",Rest,Str),
                        Str = Str
                        ->
                        AUTOGENERATEDFUNCTIONRESULT = pair_and(3,Rest)
                    ;
                    (
                            atom_concat("4",Rest,Str),
                            Str = Str
                            ->
                            AUTOGENERATEDFUNCTIONRESULT = pair_and(4,Rest)
                        ;
                        (
                                atom_concat("5",Rest,Str),
                                Str = Str
                                ->
                                AUTOGENERATEDFUNCTIONRESULT = pair_and(5,Rest)
                            ;
                            (
                                    atom_concat("6",Rest,Str),
                                    Str = Str
                                    ->
                                    AUTOGENERATEDFUNCTIONRESULT = pair_and(6,Rest)
                                ;
                                (
                                        atom_concat("7",Rest,Str),
                                        Str = Str
                                        ->
                                        AUTOGENERATEDFUNCTIONRESULT = pair_and(7,Rest)
                                    ;
                                    (
                                            atom_concat("8",Rest,Str),
                                            Str = Str
                                            ->
                                            AUTOGENERATEDFUNCTIONRESULT = pair_and(8,Rest)
                                        ;
                                        (
                                                atom_concat("9",Rest,Str),
                                                Str = Str
                                                ->
                                                AUTOGENERATEDFUNCTIONRESULT = pair_and(9,Rest)
                                            ;
                                                AUTOGENERATEDFUNCTIONRESULT = pair_and(-1,Rest)
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    ).

% FuncType EnkiString (TypeName [Named "list",EnkiInt])
digits_from(Str,AUTOGENERATEDFUNCTIONRESULT) :-
    digit_from(Str,Temp97),
    pair_and(D,Rest) = Temp97,
    (
            D = -1
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            digits_from(Rest,Temp98),
            prepend_to(D,Temp98,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
mod(A,B,R) :-
    Temp99 #= (Q * B),
    Temp100 #= (Temp99 + R),
    A = Temp100,
    0 #=< R,
    R #< B.

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
to_reversed_digits(X,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            X #< 10
            ->
            singleton(X,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            mod(X,10,Temp101),
            Temp103 #= (X div 10),
            to_reversed_digits(Temp103,Temp102),
            prepend_to(Temp101,Temp102,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
    ).

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
to_digits(X,Temp104) :-
    to_reversed_digits(X,Temp105),
    reverse_list(Temp105,Temp104).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
from_reversed_digit_list(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            from_reversed_digit_list(T,Temp106),
            Temp107 #= (10 * Temp106),
            Temp108 #= (Temp107 + H),
            AUTOGENERATEDFUNCTIONRESULT = Temp108
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
from_digit_list(List,Temp109) :-
    reverse_list(List,Temp110),
    from_reversed_digit_list(Temp110,Temp109).

% FuncType EnkiString EnkiInt
int_from(Str,Temp111) :-
    digits_from(Str,Temp112),
    from_digit_list(Temp112,Temp111).