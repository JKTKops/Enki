import(m(def(r(comp(s("odd") v("X")),cs(c(comp(v("X") s("=") comp(comp(i(2) s("*") v("K")) s("+") i(1))))))) def(r(comp(s("even") v("X")),cs(c(comp(v("X") s("=") comp(i(2) s("*") v("K"))))))) def(f(comp(s("square") s("root") v("X")),cs(c(comp(comp(v("Root") s("^") i(2)) s("=") v("X")))),e(comp(v("Root"))))) def(r(comp(v("A") s("divides") v("B")),cs(c(comp(v("B") s("=") comp(v("A") s("*") v("N"))))))) def(d(comp(s("list")),constructor(comp(s("empty")),nil) constructor(comp(s("cons") v("Head") v("Tail")),field(comp(v("Head")),int) field(comp(v("Tail")),type(comp(s("list"))))))) def(d(comp(s("pair")),constructor(comp(s("pair") v("X") s("and") v("Y")),field(comp(v("X")),int) field(comp(v("Y")),int)))) def(f(comp(s("length") s("of") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(i(1) s("+") comp(s("length") s("of") v("T"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(i(0))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("construct") v("Head") v("Full")),cs(c(comp(v("Full") s("=") comp(s("cons") v("Head") v("Tail"))))),e(comp(v("Tail"))))) def(f(comp(s("concat") v("A") s("with") v("B")),cs(when(cs(c(comp(v("A") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("H") comp(s("concat") v("T") s("with") v("B"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("B"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("flatten") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("concat") v("H") s("with") comp(s("flatten") v("T"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("reverseAcc") v("A") v("Acc")),cs(when(cs(c(comp(v("A") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("reverseAcc") v("T") comp(s("cons") v("H") v("Acc"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("Acc"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("reverse") s("list") v("A")),cs(nil),e(comp(s("reverseAcc") v("A") s("empty"))))) def(f(comp(s("sum") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("H") s("+") comp(s("sum") v("T"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(i(0))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(r(comp(v("List") s("sums") s("to") v("N")),cs(c(comp(v("N") s("=") comp(s("sum") v("List"))))))) def(f(comp(s("multiples") s("of") v("A") s("in") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T")))) c(comp(v("A") s("divides") v("H")))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("H") comp(s("multiples") s("of") v("A") s("in") v("T"))))))) when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("multiples") s("of") v("A") s("in") v("T")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("formatHelper") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") s("empty"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("H") s("..") s("\"]\"")))))) when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(comp(v("H") s("..") s("\",\"")) s("..") comp(s("formatHelper") v("T"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("\"]\""))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("format") s("list") v("List")),cs(nil),e(comp(s("\"[\"") s("..") comp(s("formatHelper") v("List")))))) def(f(comp(s("range") v("Low") s("to") v("High")),cs(when(cs(c(comp(v("Low") s(">") v("High")))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("Low") comp(s("range") comp(v("Low") s("+") i(1)) s("to") v("High")))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("range") s("from") v("Low") s("to") v("High")),cs(nil),e(comp(s("range") v("Low") s("to") v("High"))))) def(f(comp(s("inc") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") comp(v("H") s("+") i(1)) comp(s("inc") v("T"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("zip") v("A") s("and") v("B")),cs(when(cs(c(comp(v("A") s("=") comp(s("cons") v("HA") v("TA")))) c(comp(v("B") s("=") comp(s("cons") v("HB") v("TB"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") comp(s("pair") v("HA") s("and") v("HB")) comp(s("zip") v("TA") s("and") v("TB"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("max") s("of") v("A") s("and") v("B")),cs(when(cs(c(comp(v("A") s(">") v("B")))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("A")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("B"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("min") s("of") v("A") s("and") v("B")),cs(when(cs(c(comp(v("A") s(">") v("B")))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("A")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("B"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("maximum") s("of") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") s("empty"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("H")))))) when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("max") s("of") v("H") s("and") s("maximum") s("of") v("T")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(i(0))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("minimum") s("of") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") s("empty"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("H")))))) when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("min") s("of") v("H") s("and") s("minimum") s("of") v("T")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(i(0))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("find") s("factor") s("of") v("N") s("starting") s("with") v("X")),cs(when(cs(c(comp(v("X") s("divides") v("N")))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(v("X")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("find") s("factor") s("of") v("N") s("starting") s("with") comp(v("X") s("+") i(1)))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("factors") s("of") v("N")),cs(when(cs(c(comp(v("N") s("=") i(1)))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty")))))) when(cs(c(comp(v("Factor") s("=") comp(s("find") s("factor") s("of") v("N") s("starting") s("with") i(2)))) c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("Factor") s("factors") s("of") comp(v("N") s("/") v("Factor")))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("digits") s("of") v("N")),cs(when(cs(c(comp(v("N") s("<") i(10)))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("N") s("empty")))))) when(cs(c(comp(v("N") s("=") comp(comp(i(10) s("*") v("Rest")) s("+") v("Digit")))) c(comp(v("Digit") s(">=") i(0))) c(comp(v("Digit") s("<") i(10))) c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("Digit") s("digits") s("of") v("Rest"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(r(comp(s("palindrome") v("List")),cs(c(comp(comp(s("reverse") s("list") v("List")) s("=") v("List")))))) def(r(comp(s("palindrome") s("number") v("N")),cs(c(comp(s("palindrome") s("digits") s("of") v("N")))))) def(f(comp(s("pair") v("X") s("with") s("each") v("List")),cs(when(cs(c(comp(v("List") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") comp(s("pair") v("X") s("and") v("H")) comp(s("pair") v("X") s("with") s("each") v("T"))))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("cartesian") s("product") s("of") v("A") s("and") v("B")),cs(when(cs(c(comp(v("A") s("=") comp(s("cons") v("H") v("T"))))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("concat") comp(s("pair") v("H") s("with") s("each") v("B")) s("with") s("cartesian") s("product") s("of") v("T") s("and") v("B")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty"))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT"))))) def(f(comp(s("pairs") s("of") v("A") s("and") v("B")),cs(nil),e(comp(s("cartesian") s("product") s("of") v("A") s("and") v("B")))))))
def(f(comp(s("fib") s("seq") v("A") v("B") v("Limit")),cs(when(cs(c(comp(v("A") s(">") v("Limit")))),cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("empty")))))) when(cs(c(comp(v("AUTOGENERATEDFUNCTIONRESULT") s("=") comp(s("cons") v("A") comp(s("fib") s("seq") v("B") comp(v("A") s("+") v("B")) v("Limit")))))),cs(nil))),e(comp(v("AUTOGENERATEDFUNCTIONRESULT")))))
def(f(comp(s("fib") s("seq") s("up") s("to") v("N")),cs(nil),e(comp(s("fib") s("seq") i(0) i(1) v("N")))))
exec(ex(cs(c(comp(s("display") comp(s("sum") comp(s("multiples") s("of") i(2) s("in") comp(s("fib") s("seq") s("up") s("to") i(4000000)))))))))