#!/usr/bin/env swipl

:- use_module(library(clpfd)).

:- style_check(-singleton).
:- style_check(-no_effect).
:- style_check(-var_branches).
:- style_check(-discontiguous).
:- style_check(-charset).

:- initialization(main, main).

main(Argv) :-
    answer_up_to(100,Temp76),
    the(Temp76,Temp77),
    as_text(Temp77,Temp78),
    display(Temp78).
% EnkiString
display(X) :-
    writeln(X).

% FuncType EnkiInt EnkiString
as_text(X,Temp0) :-
    term_to_atom(X,Temp0).

% FuncType (Any "T5") (Any "T5")
the(X,X).

% EnkiInt
odd(X) :-
    Temp1 #= (2 * K),
    Temp2 #= (Temp1 + 1),
    X = Temp2.

% EnkiInt
even(X) :-
    Temp3 #= (2 * K),
    X = Temp3.

% FuncType EnkiInt EnkiInt
square_root(X,Root) :-
    Temp4 #= (Root ^ 2),
    Temp4 = X.

% RuleType EnkiInt EnkiInt
divides(A,B) :-
    Temp5 #= (A * N),
    B = Temp5.

% FuncType (TypeName [Named "list",Any "T37"]) EnkiInt
length_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            length_of(T,Temp6),
            Temp7 #= (1 + Temp6),
            AUTOGENERATEDFUNCTIONRESULT = Temp7
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType (Any "T50") (FuncType (TypeName [Named "list",Any "T50"]) (TypeName [Named "list",Any "T50"]))
construct(Head,Full,Tail) :-
    Full = cons(Head,Tail).

% FuncType (TypeName [Named "list",Any "T77"]) (FuncType (TypeName [Named "list",Any "T77"]) (TypeName [Named "list",Any "T77"]))
concat(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            concat(T,B,Temp8),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp8)
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",Any "T89"]) (FuncType (TypeName [Named "list",Any "T89"]) (TypeName [Named "list",Any "T89"]))
concat_with(A,B,Temp9) :-
    concat(A,B,Temp9).

% FuncType (TypeName [Named "list",TypeName [Named "list",Any "T113"]]) (TypeName [Named "list",Any "T113"])
flatten(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            flatten(T,Temp10),
            concat_with(H,Temp10,Temp11),
            AUTOGENERATEDFUNCTIONRESULT = Temp11
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T144"]) (FuncType (TypeName [Named "list",Any "T144"]) (TypeName [Named "list",Any "T144"]))
reverseAcc(A,Acc,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            reverseAcc(T,cons(H,Acc),Temp12),
            AUTOGENERATEDFUNCTIONRESULT = Temp12
        ;
            AUTOGENERATEDFUNCTIONRESULT = Acc
    ).

% FuncType (TypeName [Named "list",Any "T153"]) (TypeName [Named "list",Any "T153"])
reverse_list(A,Temp13) :-
    reverseAcc(A,empty(),Temp13).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
sum(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            sum(T,Temp14),
            Temp15 #= (H + Temp14),
            AUTOGENERATEDFUNCTIONRESULT = Temp15
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% RuleType (TypeName [Named "list",EnkiInt]) EnkiInt
sums_to(List,N) :-
    sum(List,Temp16),
    N = Temp16.

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
sum_of(List,Temp17) :-
    sum(List,Temp17).

% FuncType EnkiInt (FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",Any "T203"]))
multiples_of_in(A,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            divides(A,H)
            ->
            multiples_of_in(A,T,Temp18),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp18)
        ;
        (
                List = cons(H,T)
                ->
                multiples_of_in(A,T,Temp19),
                AUTOGENERATEDFUNCTIONRESULT = Temp19
            ;
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (TypeName [Named "list",EnkiString]) EnkiString
formatHelper(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            atom_concat(H,"]",Temp20),
            AUTOGENERATEDFUNCTIONRESULT = Temp20
        ;
        (
                List = cons(H,T)
                ->
                atom_concat(H,",",Temp21),
                formatHelper(T,Temp22),
                atom_concat(Temp21,Temp22,Temp23),
                AUTOGENERATEDFUNCTIONRESULT = Temp23
            ;
                AUTOGENERATEDFUNCTIONRESULT = "]"
        )
    ).

% FuncType (TypeName [Named "list",EnkiString]) EnkiString
format_list(List,Temp25) :-
    formatHelper(List,Temp24),
    atom_concat("[",Temp24,Temp25).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",Any "T278"]))
range_to(Low,High,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Low #> High
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            Temp26 #= (Low + 1),
            range_to(Temp26,High,Temp27),
            AUTOGENERATEDFUNCTIONRESULT = cons(Low,Temp27)
    ).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",Any "T299"]))
range_from_to(Low,High,Temp28) :-
    range_to(Low,High,Temp28).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",Any "T305"]))
integers_from_to(Low,High,Temp29) :-
    range_to(Low,High,Temp29).

% FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",Any "T321"])
inc(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            Temp30 #= (H + 1),
            inc(T,Temp31),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp30,Temp31)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T377"]) (FuncType (TypeName [Named "list",Any "T378"]) (TypeName [Named "list",Any "T359"]))
zip_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(HA,TA),
            B = cons(HB,TB)
            ->
            zip_and(TA,TB,Temp32),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(HA,HB),Temp32)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
max_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
min_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
maximum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                maximum_of(T,Temp33),
                max_of_and(H,Temp33,Temp34),
                AUTOGENERATEDFUNCTIONRESULT = Temp34
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
minimum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                minimum_of(T,Temp35),
                min_of_and(H,Temp35,Temp36),
                AUTOGENERATEDFUNCTIONRESULT = Temp36
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
find_factor_of_starting_with(N,X,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            divides(X,N)
            ->
            AUTOGENERATEDFUNCTIONRESULT = X
        ;
            Temp37 #= (X + 1),
            find_factor_of_starting_with(N,Temp37,Temp38),
            AUTOGENERATEDFUNCTIONRESULT = Temp38
    ).

% FuncType EnkiInt (TypeName [Named "list",Any "T506"])
factors_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N = 1
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            find_factor_of_starting_with(N,2,Temp39),
            Factor = Temp39,
            Temp40 #= (N div Factor),
            factors_of(Temp40,Temp41),
            AUTOGENERATEDFUNCTIONRESULT = cons(Factor,Temp41)
    ).

% FuncType EnkiInt (TypeName [Named "list",Any "T536"])
digits_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #< 10
            ->
            AUTOGENERATEDFUNCTIONRESULT = cons(N,empty())
        ;
            Temp42 #= (10 * Rest),
            Temp43 #= (Temp42 + Digit),
            N = Temp43,
            Digit #>= 0,
            Digit #< 10,
            digits_of(Rest,Temp44),
            AUTOGENERATEDFUNCTIONRESULT = cons(Digit,Temp44)
    ).

% TypeName [Named "list",Any "T564"]
palindrome(List) :-
    reverse_list(List,Temp45),
    Temp45 = List.

% EnkiInt
palindrome_number(N) :-
    digits_of(N,Temp46),
    palindrome(Temp46).

% FuncType (Any "T601") (FuncType (TypeName [Named "list",Any "T602"]) (TypeName [Named "list",Any "T583"]))
pair_with_each(X,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            pair_with_each(X,T,Temp47),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(X,H),Temp47)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T646"]) (FuncType (TypeName [Named "list",Any "T647"]) (TypeName [Named "list",Any "T625"]))
cartesian_product_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            pair_with_each(H,B,Temp48),
            cartesian_product_of_and(T,B,Temp49),
            concat_with(Temp48,Temp49,Temp50),
            AUTOGENERATEDFUNCTIONRESULT = Temp50
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T659"]) (FuncType (TypeName [Named "list",Any "T660"]) (TypeName [Named "list",Any "T661"]))
pairs_of_and(A,B,Temp51) :-
    cartesian_product_of_and(A,B,Temp51).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T688"]) (TypeName [Named "list",Any "T688"]))
take_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp52 #= (N - 1),
            take_from(Temp52,T,Temp53),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp53)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T714"]) (TypeName [Named "list",Any "T714"]))
drop_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp54 #= (N - 1),
            drop_from(Temp54,T,Temp55),
            AUTOGENERATEDFUNCTIONRESULT = Temp55
        ;
            AUTOGENERATEDFUNCTIONRESULT = List
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
product(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            product(T,Temp56),
            Temp57 #= (H * Temp56),
            AUTOGENERATEDFUNCTIONRESULT = Temp57
        ;
            AUTOGENERATEDFUNCTIONRESULT = 1
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
product_of(List,Temp58) :-
    product(List,Temp58).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T768"]) (FuncType (Any "T776") (Any "T776")))
element_of_starting_with(N,List,H,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #=< 0
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(X,Rest)
                ->
                Temp59 #= (N - 1),
                element_of_starting_with(Temp59,Rest,X,Temp60),
                AUTOGENERATEDFUNCTIONRESULT = Temp60
            ;
                AUTOGENERATEDFUNCTIONRESULT = H
        )
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T821"]) (TypeName [Named "list",Any "T789"]))
chunks_of_size_in(L,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = empty()
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            take_from(L,List,Temp61),
            drop_from(L,List,Temp62),
            chunks_of_size_in(L,Temp62,Temp63),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp61,Temp63)
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T828"]) (TypeName [Named "list",Any "T829"]))
chunks_of_length_in(L,List,Temp64) :-
    chunks_of_size_in(L,List,Temp64).

% FuncType (Any "T835") (FuncType (TypeName [Named "list",Any "T835"]) (TypeName [Named "list",Any "T835"]))
prepend_to(Head,Tail,cons(Head,Tail)).

% FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",Any "T851"])
squares_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            Temp65 #= (H ^ 2),
            squares_of(T,Temp66),
            prepend_to(Temp65,Temp66,Temp67),
            AUTOGENERATEDFUNCTIONRESULT = Temp67
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt EnkiInt
answer_up_to(N,Temp75) :-
    integers_from_to(1,N,Temp68),
    squares_of(Temp68,Temp69),
    sum_of(Temp69,Temp70),
    the(Temp70,Temp71),
    SumSquare = Temp71,
    integers_from_to(1,N,Temp72),
    sum_of(Temp72,Temp73),
    Temp74 #= (Temp73 ^ 2),
    SquareSum = Temp74,
    Temp75 #= (SquareSum - SumSquare).