#!/usr/bin/env swipl

:- use_module(library(clpfd)).

:- style_check(-singleton).
:- style_check(-no_effect).
:- style_check(-var_branches).
:- style_check(-discontiguous).
:- style_check(-charset).


map_built_in(F,empty(), empty()).
map_built_in(F,cons(H,T),cons(NewH,NewT)) :-
    call(F, H, NewH),
    map_built_in(F, T, NewT).

call_built_in(F, X, Res) :- call(F, X, Res).



:- initialization(main, main).

main(Argv) :-
    call_on(increment,10,Temp118),
    as_text(Temp118,Temp117),
    display(Temp117).
% EnkiString
display(X) :-
    writeln(X).

% FuncType (Any "T3") EnkiString
as_text(X,Temp1) :-
    term_to_atom(X,Temp1).

% FuncType (FuncType (Any "T9") (Any "T10")) (FuncType (TypeName [Named "list",Any "T9"]) (TypeName [Named "list",Any "T10"]))
map_over(F,Xs,Temp2) :-
    map_built_in(F,Xs,Temp2).

% FuncType (FuncType (Any "T16") (Any "T17")) (FuncType (Any "T16") (Any "T17"))
call_on(F,X,Temp3) :-
    call_built_in(F,X,Temp3).

% FuncType (Any "T20") (Any "T20")
the(X,X).

% FuncType (Any "T22") (Any "T22")
id(X,X).

% EnkiInt
odd(X) :-
    Temp4 #= (2 * K),
    Temp5 #= (Temp4 + 1),
    X = Temp5.

% EnkiInt
even(X) :-
    Temp6 #= (2 * K),
    X = Temp6.

% FuncType EnkiInt EnkiInt
square_root(X,Root) :-
    Temp7 #= (Root ^ 2),
    Temp7 = X.

% RuleType EnkiInt EnkiInt
divides(A,B) :-
    Temp8 #= (A * N),
    B = Temp8.

% FuncType (Any "T43") (FuncType (TypeName [Named "list",Any "T43"]) (TypeName [Named "list",Any "T43"]))
prepend_to(Head,Tail,cons(Head,Tail)).

% FuncType (TypeName [Named "list",Any "T60"]) EnkiInt
length_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            length_of(T,Temp10),
            Temp11 #= (1 + Temp10),
            AUTOGENERATEDFUNCTIONRESULT = Temp11
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType (Any "T73") (FuncType (TypeName [Named "list",Any "T73"]) (TypeName [Named "list",Any "T73"]))
construct(Head,Full,Tail) :-
    Full = cons(Head,Tail).

% FuncType (TypeName [Named "list",Any "T100"]) (FuncType (TypeName [Named "list",Any "T92"]) (TypeName [Named "list",Any "T92"]))
concat_with(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            concat_with(T,B,Temp12),
            prepend_to(H,Temp12,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",TypeName [Named "list",Any "T130"]]) (TypeName [Named "list",Any "T123"])
flatten(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            flatten(T,Temp13),
            concat_with(H,Temp13,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T161"]) (FuncType (TypeName [Named "list",Any "T161"]) (TypeName [Named "list",Any "T161"]))
reverseAcc(A,Acc,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            reverseAcc(T,cons(H,Acc),AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = Acc
    ).

% FuncType (TypeName [Named "list",Any "T170"]) (TypeName [Named "list",Any "T170"])
reverse_list(A,Temp15) :-
    reverseAcc(A,empty(),Temp15).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
sum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            sum_of(T,Temp17),
            Temp18 #= (H + Temp17),
            AUTOGENERATEDFUNCTIONRESULT = Temp18
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",EnkiInt]))
multiples_of_in(A,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            divides(A,H)
            ->
            multiples_of_in(A,T,Temp20),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp20)
        ;
        (
                List = cons(H,T)
                ->
                multiples_of_in(A,T,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (TypeName [Named "list",Any "T277"]) EnkiString
formatHelper(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            as_text(H,Temp22),
            atom_concat(Temp22,"]",AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                List = cons(H,T)
                ->
                as_text(H,Temp24),
                atom_concat(Temp24,",",Temp23),
                formatHelper(T,Temp25),
                atom_concat(Temp23,Temp25,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = "]"
        )
    ).

% FuncType (TypeName [Named "list",Any "T292"]) EnkiString
format_list(List,Temp26) :-
    formatHelper(List,Temp27),
    atom_concat("[",Temp27,Temp26).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",EnkiInt]))
range_to(Low,High,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Low #> High
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            Temp29 #= (Low + 1),
            range_to(Temp29,High,Temp28),
            AUTOGENERATEDFUNCTIONRESULT = cons(Low,Temp28)
    ).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",EnkiInt]))
range_from_to(Low,High,Temp30) :-
    range_to(Low,High,Temp30).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "list",EnkiInt]))
integers_from_to(Low,High,Temp31) :-
    range_to(Low,High,Temp31).

% FuncType (TypeName [Named "list",EnkiInt]) (TypeName [Named "list",EnkiInt])
inc(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            Temp32 #= (H + 1),
            inc(T,Temp33),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp32,Temp33)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T399"]) (FuncType (TypeName [Named "list",Any "T400"]) (TypeName [Named "list",TypeName [Named "pair",Any "T383",Any "T384"]]))
zip_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(HA,TA),
            B = cons(HB,TB)
            ->
            zip_and(TA,TB,Temp35),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(HA,HB),Temp35)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
max_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
min_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = A
        ;
            AUTOGENERATEDFUNCTIONRESULT = B
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
maximum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                maximum_of(T,Temp37),
                max_of_and(H,Temp37,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
minimum_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(H,T)
                ->
                minimum_of(T,Temp39),
                min_of_and(H,Temp39,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = 0
        )
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
find_factor_of_starting_with(N,X,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            divides(X,N)
            ->
            AUTOGENERATEDFUNCTIONRESULT = X
        ;
            Temp41 #= (X + 1),
            find_factor_of_starting_with(N,Temp41,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
    ).

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
factors_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N = 1
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            find_factor_of_starting_with(N,2,Factor),
            Factor = Factor,
            Temp43 #= (N div Factor),
            factors_of(Temp43,Temp42),
            AUTOGENERATEDFUNCTIONRESULT = cons(Factor,Temp42)
    ).

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
digits_of(N,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #< 10
            ->
            AUTOGENERATEDFUNCTIONRESULT = cons(N,empty())
        ;
            Temp45 #= (10 * Rest),
            Temp46 #= (Temp45 + Digit),
            N = Temp46,
            Digit #>= 0,
            Digit #< 10,
            digits_of(Rest,Temp47),
            AUTOGENERATEDFUNCTIONRESULT = cons(Digit,Temp47)
    ).

% TypeName [Named "list",Any "T586"]
palindrome(List) :-
    reverse_list(List,List),
    List = List.

% EnkiInt
palindromic_number(N) :-
    digits_of(N,Temp49),
    palindrome(Temp49).

% FuncType (Any "T621") (FuncType (TypeName [Named "list",Any "T622"]) (TypeName [Named "list",TypeName [Named "pair",Any "T605",Any "T606"]]))
pair_with_each(X,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            pair_with_each(X,T,Temp51),
            AUTOGENERATEDFUNCTIONRESULT = cons(pair_and(X,H),Temp51)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T668"]) (FuncType (TypeName [Named "list",Any "T669"]) (TypeName [Named "list",Any "T646"]))
cartesian_product_of_and(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A = cons(H,T)
            ->
            pair_with_each(H,B,Temp52),
            cartesian_product_of_and(T,B,Temp53),
            concat_with(Temp52,Temp53,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType (TypeName [Named "list",Any "T681"]) (FuncType (TypeName [Named "list",Any "T682"]) (TypeName [Named "list",Any "T683"]))
pairs_of_and(A,B,Temp54) :-
    cartesian_product_of_and(A,B,Temp54).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T710"]) (TypeName [Named "list",Any "T701"]))
take_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp56 #= (N - 1),
            take_from(Temp56,T,Temp55),
            AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp55)
        ;
            AUTOGENERATEDFUNCTIONRESULT = empty()
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T736"]) (TypeName [Named "list",Any "T736"]))
drop_from(N,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #> 0,
            List = cons(H,T)
            ->
            Temp57 #= (N - 1),
            drop_from(Temp57,T,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            AUTOGENERATEDFUNCTIONRESULT = List
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
product_of(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            product_of(T,Temp58),
            Temp59 #= (H * Temp58),
            AUTOGENERATEDFUNCTIONRESULT = Temp59
        ;
            AUTOGENERATEDFUNCTIONRESULT = 1
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T786"]) (FuncType (Any "T794") (Any "T794")))
element_of_starting_with(N,List,H,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            N #=< 0
            ->
            AUTOGENERATEDFUNCTIONRESULT = H
        ;
        (
                List = cons(X,Rest)
                ->
                Temp60 #= (N - 1),
                element_of_starting_with(Temp60,Rest,X,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = H
        )
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T841"]) (TypeName [Named "list",TypeName [Named "list",Any "T814"]]))
chunks_of_size_in(L,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = empty()
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            take_from(L,List,Temp61),
            drop_from(L,List,Temp63),
            chunks_of_size_in(L,Temp63,Temp62),
            AUTOGENERATEDFUNCTIONRESULT = cons(Temp61,Temp62)
    ).

% FuncType EnkiInt (FuncType (TypeName [Named "list",Any "T848"]) (TypeName [Named "list",TypeName [Named "list",Any "T849"]]))
chunks_of_length_in(L,List,Temp64) :-
    chunks_of_size_in(L,List,Temp64).

% RuleType (TypeName [Named "list",Any "T862"]) (Any "T862")
contains(List,Element) :-
    (
            List = cons(H,T),
            H = Element
            ->
            1 = 1
        ;
        (
                List = cons(H,T)
                ->
                contains(T,Element)
            ;
                1 = 2
        )
    ).

% FuncType (Any "T896") (FuncType (TypeName [Named "list",Any "T896"]) (TypeName [Named "list",Any "T896"]))
remove_from(Element,List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T),
            H = Element
            ->
            AUTOGENERATEDFUNCTIONRESULT = T
        ;
        (
                List = cons(H,T)
                ->
                remove_from(Element,T,Temp66),
                AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp66)
            ;
                1 = 2,
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (Any "T910") (FuncType (Any "T911") (TypeName [Named "mapping",Any "T910",Any "T911"]))
maps_to(X,Y,pipe_dash_gt_(X,Y)).

% FuncType EnkiInt (FuncType EnkiInt (TypeName [Named "ordering"]))
compare_to(A,B,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            A #> B
            ->
            AUTOGENERATEDFUNCTIONRESULT = greater()
        ;
        (
                A #< B
                ->
                AUTOGENERATEDFUNCTIONRESULT = less()
            ;
                AUTOGENERATEDFUNCTIONRESULT = equal()
        )
    ).

% FuncType (TypeName [Named "mapping",Any "T933",Any "T934"]) (Any "T933")
key_in(AUTOGENARG3,K) :-
    maps_to(K,V,AUTOGENARG3),
    AUTOGENARG3 = AUTOGENARG3.

% FuncType (TypeName [Named "mapping",Any "T944",Any "T945"]) (Any "T945")
value_in(AUTOGENARG3,V) :-
    maps_to(K,V,AUTOGENARG3),
    AUTOGENARG3 = AUTOGENARG3.

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T957"]) (FuncType (TypeName [Named "mapping",EnkiInt,Any "T966"]) (TypeName [Named "ordering"]))
compare_keys_to(AUTOGENARG3,AUTOGENARG5,Temp68) :-
    AUTOGENARG3 = pipe_dash_gt_(K1,V1),
    AUTOGENARG5 = pipe_dash_gt_(K2,V2),
    compare_to(K1,K2,Temp68).

% FuncType (TypeName [Named "mapping",Any "T979",EnkiInt]) (FuncType (TypeName [Named "mapping",Any "T988",EnkiInt]) (TypeName [Named "ordering"]))
compare_values_to(AUTOGENARG3,AUTOGENARG5,Temp69) :-
    AUTOGENARG3 = pipe_dash_gt_(K1,V1),
    AUTOGENARG5 = pipe_dash_gt_(K2,V2),
    compare_to(V1,V2,Temp69).

% FuncType (Any "T1008") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1008",Any "T1009"]]) (Any "T1009"))
get_key_from(Key,Map,V) :-
    contains(Map,pipe_dash_gt_(Key,V)).

% FuncType (Any "T1025") (FuncType (Any "T1026") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1025",Any "T1026"]]) (TypeName [Named "list",TypeName [Named "mapping",Any "T1025",Any "T1026"]])))
insert_into(K,V,Map,cons(pipe_dash_gt_(K,V),Map)).

% FuncType (Any "T1042") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1042",Any "T1043"]]) (TypeName [Named "list",TypeName [Named "mapping",Any "T1042",Any "T1043"]]))
remove_key_from(Key,Map,Temp74) :-
    remove_from(pipe_dash_gt_(Key,V),Map,Temp74).

% FuncType (Any "T1077") (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1077",EnkiInt]]) (TypeName [Named "list",TypeName [Named "mapping",Any "T1077",EnkiInt]]))
increment_key_in(Key,Map,Temp76) :-
    Temp79 #= (V + 1),
    remove_from(pipe_dash_gt_(Key,V),Map,Temp77),
    insert_into(Key,Temp79,Temp77,Temp76).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T1120"]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1121"]]) (TypeName [Named "mapping",EnkiInt,Any "T1120"]))
max_key_at_least_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_keys_to(M2,M1,Temp80),
            Temp80 = less()
            ->
            max_key_at_least_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                max_key_at_least_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1150"]]) (TypeName [Named "maybe",TypeName [Named "mapping",EnkiInt,Any "T1150"]])
max_key_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            max_key_at_least_in(M1,Map,Temp82),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp82)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",EnkiInt,Any "T1195"]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1196"]]) (TypeName [Named "mapping",EnkiInt,Any "T1195"]))
min_key_no_more_than_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_keys_to(M2,M1,Temp83),
            Temp83 = less()
            ->
            min_key_no_more_than_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                min_key_no_more_than_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",EnkiInt,Any "T1225"]]) (TypeName [Named "maybe",TypeName [Named "mapping",EnkiInt,Any "T1225"]])
min_key_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            min_key_no_more_than_in(M1,Map,Temp85),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp85)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",Any "T1270",EnkiInt]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1271",EnkiInt]]) (TypeName [Named "mapping",Any "T1270",EnkiInt]))
max_value_at_least_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_values_to(M2,M1,Temp86),
            Temp86 = less()
            ->
            max_value_at_least_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                max_value_at_least_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1300",EnkiInt]]) (TypeName [Named "maybe",TypeName [Named "mapping",Any "T1300",EnkiInt]])
max_value_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            max_value_at_least_in(M1,Map,Temp88),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp88)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (TypeName [Named "mapping",Any "T1345",EnkiInt]) (FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1346",EnkiInt]]) (TypeName [Named "mapping",Any "T1345",EnkiInt]))
min_value_no_more_than_in(M1,Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M2,Assocs),
            compare_values_to(M2,M1,Temp89),
            Temp89 = less()
            ->
            min_value_no_more_than_in(M2,Assocs,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
        (
                Map = cons(P,Assocs)
                ->
                min_value_no_more_than_in(M1,Assocs,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = M1
        )
    ).

% FuncType (TypeName [Named "list",TypeName [Named "mapping",Any "T1375",EnkiInt]]) (TypeName [Named "maybe",TypeName [Named "mapping",Any "T1375",EnkiInt]])
min_value_in(Map,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            Map = cons(M1,Assocs)
            ->
            min_value_no_more_than_in(M1,Map,Temp91),
            AUTOGENERATEDFUNCTIONRESULT = just(Temp91)
        ;
            AUTOGENERATEDFUNCTIONRESULT = nothing()
    ).

% FuncType (Any "T1385") (TypeName [Named "list",Any "T1385"])
singleton(X,cons(X,empty())).

% FuncType (TypeName [Named "list",Any "T1422"]) (TypeName [Named "list",Any "T1404"])
init(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
        (
                List = cons(H,T)
                ->
                init(T,Temp95),
                AUTOGENERATEDFUNCTIONRESULT = cons(H,Temp95)
            ;
                AUTOGENERATEDFUNCTIONRESULT = empty()
        )
    ).

% FuncType (TypeName [Named "list",Any "T1458"]) (TypeName [Named "maybe",Any "T1458"])
last(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,empty())
            ->
            AUTOGENERATEDFUNCTIONRESULT = just(H)
        ;
        (
                List = cons(H,T)
                ->
                last(T,AUTOGENERATEDFUNCTIONRESULT),
                AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
            ;
                AUTOGENERATEDFUNCTIONRESULT = nothing()
        )
    ).

% RuleType (TypeName [Named "list",Any "T1477"]) (Any "T1477")
does_not_contain(List,Element) :-
    (
            List = cons(Element,T)
            ->
            1 = 2
        ;
        (
                List = cons(H,T),
                H \= Element
                ->
                does_not_contain(T,Element)
            ;
                1 = 1
        )
    ).

% FuncType EnkiString (TypeName [Named "pair",EnkiInt,EnkiString])
digit_from(Str,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            atom_concat("0",Rest,Str),
            Str = Str
            ->
            AUTOGENERATEDFUNCTIONRESULT = pair_and(0,Rest)
        ;
        (
                atom_concat("1",Rest,Str),
                Str = Str
                ->
                AUTOGENERATEDFUNCTIONRESULT = pair_and(1,Rest)
            ;
            (
                    atom_concat("2",Rest,Str),
                    Str = Str
                    ->
                    AUTOGENERATEDFUNCTIONRESULT = pair_and(2,Rest)
                ;
                (
                        atom_concat("3",Rest,Str),
                        Str = Str
                        ->
                        AUTOGENERATEDFUNCTIONRESULT = pair_and(3,Rest)
                    ;
                    (
                            atom_concat("4",Rest,Str),
                            Str = Str
                            ->
                            AUTOGENERATEDFUNCTIONRESULT = pair_and(4,Rest)
                        ;
                        (
                                atom_concat("5",Rest,Str),
                                Str = Str
                                ->
                                AUTOGENERATEDFUNCTIONRESULT = pair_and(5,Rest)
                            ;
                            (
                                    atom_concat("6",Rest,Str),
                                    Str = Str
                                    ->
                                    AUTOGENERATEDFUNCTIONRESULT = pair_and(6,Rest)
                                ;
                                (
                                        atom_concat("7",Rest,Str),
                                        Str = Str
                                        ->
                                        AUTOGENERATEDFUNCTIONRESULT = pair_and(7,Rest)
                                    ;
                                    (
                                            atom_concat("8",Rest,Str),
                                            Str = Str
                                            ->
                                            AUTOGENERATEDFUNCTIONRESULT = pair_and(8,Rest)
                                        ;
                                        (
                                                atom_concat("9",Rest,Str),
                                                Str = Str
                                                ->
                                                AUTOGENERATEDFUNCTIONRESULT = pair_and(9,Rest)
                                            ;
                                                AUTOGENERATEDFUNCTIONRESULT = pair_and(-1,Rest)
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    ).

% FuncType EnkiString (TypeName [Named "list",EnkiInt])
digits_from(Str,AUTOGENERATEDFUNCTIONRESULT) :-
    digit_from(Str,Temp99),
    pair_and(D,Rest) = Temp99,
    (
            D = -1
            ->
            AUTOGENERATEDFUNCTIONRESULT = empty()
        ;
            digits_from(Rest,Temp100),
            prepend_to(D,Temp100,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
    ).

% FuncType EnkiInt (FuncType EnkiInt EnkiInt)
mod(A,B,R) :-
    Temp101 #= (Q * B),
    Temp102 #= (Temp101 + R),
    A = Temp102,
    0 #=< R,
    R #< B.

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
to_reversed_digits(X,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            X #< 10
            ->
            singleton(X,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
        ;
            mod(X,10,Temp103),
            Temp105 #= (X div 10),
            to_reversed_digits(Temp105,Temp104),
            prepend_to(Temp103,Temp104,AUTOGENERATEDFUNCTIONRESULT),
            AUTOGENERATEDFUNCTIONRESULT = AUTOGENERATEDFUNCTIONRESULT
    ).

% FuncType EnkiInt (TypeName [Named "list",EnkiInt])
to_digits(X,Temp106) :-
    to_reversed_digits(X,Temp107),
    reverse_list(Temp107,Temp106).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
from_reversed_digit_list(List,AUTOGENERATEDFUNCTIONRESULT) :-
    (
            List = cons(H,T)
            ->
            from_reversed_digit_list(T,Temp108),
            Temp109 #= (10 * Temp108),
            Temp110 #= (Temp109 + H),
            AUTOGENERATEDFUNCTIONRESULT = Temp110
        ;
            AUTOGENERATEDFUNCTIONRESULT = 0
    ).

% FuncType (TypeName [Named "list",EnkiInt]) EnkiInt
from_digit_list(List,Temp111) :-
    reverse_list(List,Temp112),
    from_reversed_digit_list(Temp112,Temp111).

% FuncType EnkiString EnkiInt
int_from(Str,Temp113) :-
    digits_from(Str,Temp114),
    from_digit_list(Temp114,Temp113).

% FuncType EnkiInt EnkiInt
increment(X,Temp115) :-
    Temp115 #= (X + 1).